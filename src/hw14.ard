\import Data.Bool (Bool, false, true)
\import Function.Meta ($)
\import Logic.Meta
\import Meta
\import Paths (transportInv)
\import Paths.Meta
\import Set
\import Set.Fin
\import Utils
\import lect04 (true/=false)
\import lect11 (funExt)
\import lect12 (DecEq, equivalence=>equality, exists)
\import lect13
\import lect14

-- 1. Докажите, что add x (add x s) = add x s и add x (add y s) = add y (add x s)

\func add-idemp {S : SetSpec} (x : S.A) (s : S) : add x (add x s) = add x s
  => S.setExt (add x (add x s)) (add x s) (\lam x1 =>
      (\lam ise => \case S.addProp x1 x (add x s) ise \with {
        | byLeft a => rewrite a (S.addHead x s)
        | byRight b => b
      }, S.addTail x1 x (add x s)))

\func add-swap {S : SetSpec} (x y : S.A) (s : S) : add x (add y s) = add y (add x s)
  => S.setExt (add x (add y s)) (add y (add x s)) (\lam x1 => (aux _ _ _ _, aux _ _ _ _))
  \where {
    \func aux {S : SetSpec} (x y x1 : S.A) (s : S) (ise : isElem x1 (add y (add x s))): isElem x1 (add x (add y s))
      => \case S.addProp _ _ (add x s) ise \with {
            | byLeft a => rewrite a (S.addTail _ _ _ (S.addHead _ _))
            | byRight b => \case S.addProp _ _ _ b \with {
              | byLeft a => rewrite a (S.addHead _ _)
              | byRight b1 => S.addTail _ _ _ (addTail _ _ _ b1)
            }
          }
  }

-- 2. Докажите, что множество подмножеств является инстансом SetSpec

\func subsets {A : \Set} : SetSpec {A} (A -> \Prop)
  => \new SetSpec {
      | empty => \lam a => Empty
      | add => \lam head subs a => (a = head) `Or` (subs a)
      | isElem => \lam a subs => subs a
      | setExt => \lam subs1 subs2 p => funExt (\lam a => \Prop) subs1 subs2
          (\lam a => \let q => p a \in path (iso q.1 q.2 (\lam a => Path.inProp _ _) (\lam a => Path.inProp _ _)))
      | emptySpec => \lam x e => e
      | addHead => \lam x s => byLeft idp
      | addTail => \lam y x s s1 => byRight s1
      | addProp => \lam y x s o => o
    }


-- 3. Докажите, что множество подмножеств является наибольшим инстансом, то есть любой другой вкладывается в него.

\func subsets-largest (S : SetSpec) : \Sigma (f : S -> (S.A -> \Prop)) (isInj f)
  => (\lam s a => isElem a s, \lam x y p =>
      S.setExt x y (\lam x1 => rewrite (pmap (\lam f => f x1) p) (\lam x => x, \lam x => x)))

-- 4. Определите функцию isEmpty для произвольного конечного множества и для ListSet.

\func isEmptySet {S : FinSetSpec} (x : S) : Bool => isEmptyListSet (rewrite listSet=Set x)

\func isEmptyListSet {A : \Set} (x : ListSet A) : Bool \elim x
  | inR nil => true
  | inR (cons a a1) => false
  | eq nil nil r i => true
  | eq nil (cons a a') r i => (absurd (aux' r) : true = false) @ i
  | eq (cons a a1) nil r i => (absurd (aux r) : false = true) @ i
  | eq (cons a a1) (cons a2 a') r i => false
  \where {
    \func aux {A : \Set} {a : A} {lst : List A} (p : EqList (cons a lst) nil): Empty
      => \let | t' => (p a).1 (here idp) \in contradiction

    \func aux' {A : \Set} {a : A} {lst : List A} (p : EqList nil (cons a lst)): Empty
      => \let | t' => (p a).2 (here idp) \in contradiction
  }

-- 5. Определите функцию union {A : \Set} : S A -> S A -> S A для
--        произвольного S A (удовлетворяющего FinSetSpec) и для ListSet.

\func union {S : FinSetSpec} (s1 s2 : S) : S =>
            rewriteI listSet=Set (unionListSet (rewrite listSet=Set s1) (rewrite listSet=Set s2))

\func unionListSet {A : \Set} (s1 s2 : ListSet A) : ListSet A
  | inR a, inR b => inR (a ++ b)
  | eq s1 s2 r i, inR a => lemma3 _ _ (lemma4 a r) @ i
  | inR a, eq s1 s2 r i => lemma3 _ _ (lemma4' a r) @ i
  \where {
    \func \infixl 5 ++ {A : \Set} (a b : List A): List A
      | nil, x => x
      | x, nil => x
      | cons a a1, cons a2 b => cons a $ cons a2 $ a1 ++ b

    \func lemma1 {A : \Set} {a : A} {l1 l2 : List A} (p : a `In (l1 ++ l2)): In a l1 `Or` In a l2 \elim l1, l2, p
      | nil, cons a1 l2, p => byRight p
      | cons a1 l1, nil, p => byLeft p
      | cons a1 l1, cons a2 l2, here idp => byLeft (here idp)
      | cons a1 l1, cons a2 l2, there p => \case \elim p \with {
        | here p => byRight (here p)
        | there p => \case lemma1 p \with {
          | byLeft a => byLeft (there a)
          | byRight b => byRight (there b)
        }
      }

    \func lemma2 {A : \Set} {a : A} (l1 l2 : List A) (p : In a l1): a `In (l1 ++ l2)
      | cons a1 l1, nil, p => p
      | cons a1 l1, cons a2 l2, here idp => here idp
      | cons a1 l1, cons a2 l2, there p => there (there (lemma2 l1 l2 p))

    \func lemma2' {A : \Set} {a : A} (l1 l2 : List A) (p : In a l2): a `In (l1 ++ l2)
      | nil, cons a1 l2, p => p
      | cons a1 l1, cons a2 l2, here idp => there (here idp)
      | cons a1 l1, cons a2 l2, there p => there (there (lemma2' l1 l2 p))

    \func lemma3 {A : \Set} (l1 l2 : List A) (p : EqList l1 l2): inR {List A} {EqList} l1 = inR l2
      => quotientEq l1 l2 p

    \func lemma4 {A : \Set} (l : List A) {l1 l2 : List A} (p : EqList l1 l2): EqList (l1 ++ l) (l2 ++ l)
      => \lam x => (
        \lam i => \case lemma1 i \with {
          | byLeft a1 => lemma2 _ _ ((p x).1 a1)
          | byRight b => lemma2' _ _ b
        },
        \lam i => \case lemma1 i \with {
          | byLeft a1 => lemma2 _ _ ((p x).2 a1)
          | byRight b => lemma2' _ _ b
        })

    \func lemma4' {A : \Set} (l : List A) {l1 l2 : List A} (p : EqList l1 l2): EqList (l ++ l1) (l ++ l2)
      => \lam x => (
        \lam i => \case lemma1 i \with {
          | byLeft a1 => lemma2 _ _ a1
          | byRight b => lemma2' _ _ ((p x).1 b)
        },
        \lam i => \case lemma1 i \with {
          | byLeft a1 => lemma2 _ _ a1
          | byRight b => lemma2' _ _ ((p x).2 b)
        })
  }

-- 6. Определите функцию intersection {A : DecSet} : S A -> S A -> S A для произвольного S A
--      (удовлетворяющего FinSetSpec) и для ListSet.

--\func intersection  {A : DecSet} {S : FinSetSpec {A}} (s1 s2 : S) : S =>
--  rewriteI listSet=Set (intersectionListSet (rewrite listSet=Set s1) (rewrite listSet=Set s2))


\func intersectionListSet {A : DecSet} (s1 s2 : ListSet A) : ListSet A \elim s1, s2
  | inR a, inR a1 => inR (a ^^ a1)
  | inR a, eq a1 a' r i => quotientEq _ _ (lem1 a r) @ i
  | eq a a' r i, inR a1 => quotientEq _ _ (lem2 a1 r) @ i
  \where {
    \func \infixl 5 ^^  {A : DecSet} (l1 l2 : List A) : List A
      | nil, _ => nil
      | _, nil => nil
      | cons a s1, set => \case a `isin set \with {
        | true => cons a (s1 ^^ set)
        | false => s1 ^^ set
      }

    \func isin {A : DecSet} (a : A) (l : List A) : Bool
      | a, nil => false
      | a, cons a1 l => \case decideEq a a1 \with {
        | yes e => true
        | no n => a `isin l
      }

    \func Eqlist-nil^2 {A : DecSet} : EqList {A} nil nil => \lam x => (\lam i => i, \lam i => i)

    \func lem1 {A : DecSet} (l : List A) {l1 l2 : List A} (p : EqList l1 l2): EqList (l ^^ l1) (l ^^ l2)
      | nil, {nil}, {nil}, p => Eqlist-nil^2
      | nil, {nil}, {cons a l2}, p => Eqlist-nil^2
      | nil, {cons a l1}, {nil}, p => Eqlist-nil^2
      | nil, {cons a l1}, {cons a1 l2}, p => Eqlist-nil^2
      | cons a l, {nil}, {nil}, p => Eqlist-nil^2
      | cons a l, {nil}, {cons a1 l2}, p => \case (p a1).2 (here idp) \with {}
      | cons a l, {cons a1 l1}, {nil}, p => \case (p a1).1 (here idp) \with {}
      | cons a l, {cons a1 l1}, {set}, p =>
        \case decideEq a a1 \as dec, idp : decideEq a a1 = dec
        \return
          EqList (\case \case dec \return Bool \with {| yes _ => true | no _ => isin a l1}
                        \with {| true => cons a (l ^^ cons a1 l1) | false => l ^^ cons a1 l1}) (cons a l ^^ set)
        \with {
          | yes e, p1 => \lam x =>
              ( \lam i => \case \elim i \with {
                | here p2 => lem4 (cons a l) set (here p2) (((p x).1) (here (p2 *> e)))
                | there i =>
                  \let t => lem3 l (cons a1 l1) i \in
                  lem4 (cons a l) set (there t.1) ((p x).1 t.2)
              }
              , \lam i => \let t => lem3 (cons a l) set i
                \in \case decideEq x a \with {
                  | yes e1 => here e1
                  | no n => \case t.1 \with {
                    | here p2 => contradiction
                    | there i1 => there (lem4 l (cons a1 l1) i1 ((p x).2 t.2))
                  }
                }
              )
          | no n, p1 =>
            \case isin a l1 \as i, idp : isin a l1 = i
            \return
              EqList (\case i \with {
                | true => cons a (l ^^ cons a1 l1)
                | false => l ^^ cons a1 l1
              }) (cons a l ^^ set)
            \with {
              | true, p2 => \lam x =>
                  ( \lam i => \case decideEq x a \with {
                    | yes e => lem4 (cons a l) set (here e) ((p x).1 (rewrite e (there (lem5 l1 p2))))
                    | no n1 => lem4 (cons a l) set
                        (\case i \with {
                          | here p3 => here p3
                          | there i1 => there (lem3 _ _ i1).1
                        })
                        (\case i \with {
                          | here p3 => contradiction
                          | there i1 => (p x).1 (lem3 _ _ i1).2
                        })
                  }
                  , \lam i => \case decideEq x a \with {
                    | yes e => here e
                    | no n1 => there (lem4 l (cons a1 l1) (\case (lem3 (cons a l) set i).1 \with {
                      | here p3 => contradiction
                      | there i1 => i1
                    }) ((p x).2 (lem3 _ _ i).2))
                  }
                  )
              | false, p2 => \lam x =>
                  ( \lam i => lem4 _ _ (there (lem3 _ _ i).1) ((p x).1 (lem3 _ _ i).2)
                  , \lam i => lem4 _ _ (\case (lem3 _ _ i).1 \with {
                          | here p3 =>
                              \let | t : isin a (cons a1 l1) = false => mcases \with {
                                                                            | yes e => contradiction
                                                                            | no n1 => p2
                                                                          }
                                   | c2 : Not (In a set) => \lam i1 => lem6 (cons a1 l1) t ((p a).2 i1)
                                   | c3 : In a set => rewriteI p3 (lem3 _ _ i).2
                              \in contradiction
                          | there i1 => i1
                        }) ((p x).2 (lem3 _ _ i).2)
                  )
            }
        }

    -- Аналогично
    \func lem2 {A : DecSet} (l : List A) {l1 l2 : List A} (p : EqList l1 l2): EqList (l1 ^^ l) (l2 ^^ l)
      | nil, {nil}, {nil}, p => Eqlist-nil^2
      | nil, {nil}, {cons a l2}, p => Eqlist-nil^2
      | nil, {cons a l1}, {nil}, p => Eqlist-nil^2
      | nil, {cons a l1}, {cons a1 l2}, p => Eqlist-nil^2
      | cons a l, {nil}, {nil}, p => Eqlist-nil^2
      | cons a l, {nil}, {cons a1 l2}, p => \case (p a1).2 (here idp) \with {}
      | cons a l, {cons a1 l1}, {nil}, p => \case (p a1).1 (here idp) \with {}
      | cons a l, {cons a1 l1}, {set}, p => {?}

    \func lem3 {A : DecSet} {x : A} (l1 l2 : List A) (p : x `In (l1 ^^ l2)): \Sigma (x `In` l1) (x `In` l2)
    \elim x, l1, l2, p
      | x, nil, nil, ()
      | x, cons a l1, cons a1 l2, p => \case decideEq a a1 \as d, idp : decideEq a a1 = d \with {
        | yes e, p1 => \let p' => transport (\lam z => In x (\case \case z \return Bool \with {
                      | yes _ => true
                      | no _ => isin a l2
                    } \with {
                      | true => cons a (l1 ^^ cons a1 l2)
                      | false => l1 ^^ cons a1 l2
                    })) p1 p \in \case decideEq x a \with {
          | yes e1 => (here e1, here (e1 *> e))
          | no n => (there (\case p' \with {
            | here p2 => contradiction
            | there i => (lem3 _ _ i).1
          }), there (\case p' \with {
            | here p2 => contradiction
            | there i => \case (lem3 _ _ i).2 \with {
              | here p2 => contradiction
              | there i1 => i1
            }
          }))
        }
        | no n, p1 => \let p' => transport (\lam z => In x (\case \case z \return Bool \with {
                    | yes _ => true
                    | no _ => isin a l2
                  } \with {
                    | true => cons a (l1 ^^ cons a1 l2)
                    | false => l1 ^^ cons a1 l2
                  })) p1 p \in \case isin a l2 \as iss, idp : isin a l2 = iss \with {
                            | true, p2 => \let p'' => transport (\lam z => In x (\case z \with {
                              | true => cons a (l1 ^^ cons a1 l2)
                              | false => l1 ^^ cons a1 l2
                            })) p2 p' \in
                            \case p'' \with {
                              | here p3 => (here p3, there (lem5 _ (rewrite p3 p2)))
                              | there i => (there (lem3 _ _ i).1, (lem3 _ _ i).2)
                            }
                            | false, p2 => \let p'' => transport (\lam z => In x (\case z \with {
                              | true => cons a (l1 ^^ cons a1 l2)
                              | false => l1 ^^ cons a1 l2
                            })) p2 p' \in (there (lem3 _ _ p'').1, (lem3 _ _ p'').2)
        }
      }

    \func lem4 {A : DecSet} {x : A} (l1 l2 : List A) (p : x `In` l1) (p2 : x `In` l2):  x `In (l1 ^^ l2)
    \elim x, l1, l2, p, p2
      | x, cons a l1, cons a1 l2, here idp, here idp => \let t : decideEq x x = yes idp
                                                          => \case decideEq x x \as d, idp : decideEq x x = d \with {
                                                            | yes e, p => \let t => Path.inProp e idp \in rewriteI t p
                                                            | no n, p => contradiction
                                                          }
                                                     \in transportInv
                                                  (\lam (x' : Dec (x = x)) => In x (\case \case x' \return Bool \with {
                                                    | yes _ => true
                                                    | no _ => isin x l2
                                                  } \with {
                                                    | true => cons x (l1 ^^ cons x l2)
                                                    | false => l1 ^^ cons x l2
                                                  })) t (here idp)
      | x, cons a l1, cons a1 l2, here idp, there p2 => \case decideEq x a1 \as dec, idp : decideEq x a1 = dec \with {
        | yes e, p1 => transportInv (\lam z =>
                        In x (\case \case z \return Bool \with {
                          | yes _ => true
                          | no _ => isin x l2
                        } \with {
                          | true => cons x (l1 ^^ cons a1 l2)
                          | false => l1 ^^ cons a1 l2
                        })
                    ) p1 (here idp)
        | no n, p1 => transportInv
                    (\lam z => In x (\case \case z \return Bool \with {
                      | yes _ => true
                      | no _ => isin x l2
                    } \with {
                      | true => cons x (l1 ^^ cons a1 l2)
                      | false => l1 ^^ cons a1 l2
                    })) p1 (\case isin x l2 \as iis, idp : isin x l2 = iis \with {
              | true, p => transportInv (\lam z =>     In x (\case z \with {
                            | true => cons x (l1 ^^ cons a1 l2)
                            | false => l1 ^^ cons a1 l2
                          })) p (here idp)
              | false, p => transportInv (\lam z =>     In x (\case z \with {
                            | true => cons x (l1 ^^ cons a1 l2)
                            | false => l1 ^^ cons a1 l2
                          })) p (\let con => lem6 l2 p \in contradiction)
            } )
      }
      | x, cons a l1, cons a1 l2, there p, here idp => \case decideEq a x \as dec, idp : decideEq a x = dec \with {
        | yes e, p1 => transportInv (\lam z =>
            In x (\case \case z \return Bool \with {
              | yes _ => true
              | no _ => isin a l2
            } \with {
              | true => cons a (l1 ^^ cons x l2)
              | false => l1 ^^ cons x l2
            })
                                    ) p1 (here (sym e))
        | no n, p1 => transportInv (\lam z =>
            In x (\case \case z \return Bool \with {
              | yes _ => true
              | no _ => isin a l2
            } \with {
              | true => cons a (l1 ^^ cons x l2)
              | false => l1 ^^ cons x l2
            })
               ) p1 (mcases \with {
          | true => there (lem4 _ _ p (here idp))
          | false => lem4 _ _ p (here idp)
        })
      }
      | x, cons a l1, cons a1 l2, there p, there p2 => \case decideEq a a1 \as d, idp : decideEq a a1 = d \with {
        | yes e, p1 => transportInv (\lam z => In x (\case \case z \return Bool \with {
                                            | yes _ => true
                                            | no _ => isin a l2
                                          } \with {
                                            | true => cons a (l1 ^^ cons a1 l2)
                                            | false => l1 ^^ cons a1 l2
                                          })) p1 (there (lem4 _ _ p (there p2)))
        | no n, p1 => transportInv (\lam z => In x (\case \case z \return Bool \with {
                      | yes _ => true
                      | no _ => isin a l2
                    } \with {
                      | true => cons a (l1 ^^ cons a1 l2)
                      | false => l1 ^^ cons a1 l2
                    })) p1 (mcases \with {
          | true => there (lem4 _ _ p (there p2))
          | false => lem4 _ _ p (there p2)
        })
      }

    \func lem5 {A : DecSet} {x : A} (l1 : List A) (p : isin x l1 = true): In x l1 \elim x, l1, p
      | x, cons a l1, p => \case decideEq x a \as d, idp : decideEq x a = d \with {
        | yes e, p1 => here e
        | no n, p1 => \let p' => transport (\lam z => (\case z \with {
          | yes _ => true
          | no _ => isin x l1
        }) = true) p1 p \in there (lem5 _ p')
      }

    \func lem6 {A : DecSet} {x : A} (l1 : List A) (p : isin x l1 = false): Not (In x l1)
      => \lam i => \let p => lem7 _ i \in contradiction

    \func lem7 {A : DecSet} {x : A} (l1 : List A) (p : In x l1): isin x l1 = true \elim x, l1, p
      | x, cons a l1, here idp => mcases \with {
        | yes e => idp
        | no n => contradiction
      }
      | x, cons a l1, there p => mcases \with {
        | yes e => idp
        | no n => lem7 l1 p
      }
  }

-- 7. Мы не можем определить функция size в общем случае, но мы можем определить предикат S -> Nat -> \Prop,
--        соответствующий \lam xs n => size xs <= n.
--    Задайте этот предикат и докажите, что он эквивалентен обычному определению, если A -- разрешимо и S -- конечно.

\func set-size-lt {S : SetSpec} (s : S) (n : Nat) => exists (\Sigma (x : S.A) (isElem x s) -> Fin n) isInj

-- Optional
-- 8. Определите предикат isFin : \Type -> \Prop так, чтобы множество
--    \Sigma (P : A -> \Prop) (isFin (\Sigma (a : A) (P A))) удовлетворяло FinSetSpec, определите этот инстанс.

-- Optional
-- 9. Определите NubListSet и инстанс FinSetSpec для него.
