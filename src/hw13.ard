\import Algebra.Meta
\import Function.Meta
\import Logic.Meta
\import Meta
\import Paths (transportInv)
\import Paths.Meta
\import Utils
\import hw05 (In, contrProp)
\import hw12 (prop-isSet)
\import lect11 (isProp)
\import lect12 (Equiv, equivalence=>equality, exists)
\import lect13
\import Prelude \using (I \as Interval) \hiding (Int, pos, neg)

-- 1. Определите функцию negPred : Int -> Int такую, что negPred x = x, если x > 0, и negPred x = x - 1, если x <= 0.

\func negPred (x : Int) : Int \elim x
  | pos 0 => neg 1
  | pos (suc n) => pos (suc n)
  | neg n => neg (suc n)

\func test1 : negPred (pos 5) = pos 5 => idp
\func test2 : negPred (pos 0) = neg 1 => idp
\func test3 : negPred (neg 5) = neg 6 => idp

-- 2. Определите функции сложения и умножения для Int.

\func \infixl 6 + (x y : Int) : Int \with
  | pos x,       pos y       => pos (x Nat.+ y)
  | pos (suc x), neg (suc y) => pos x + neg y
  | neg (suc x), pos (suc y) => neg x + pos y
  | neg (suc x), neg (suc y) => neg (x Nat.+ y)
  | pos 0      , neg n       => neg n
  | neg (suc x), pos 0       => neg (suc x)

\func \infixl 7 * (x y : Int) : Int \with
  | pos x,       pos y       => pos (x Nat.* y)
  | pos x,       neg (suc y) => neg (x Nat.* suc y)
  | neg (suc x), pos y       => neg (suc x Nat.* y)
  | neg (suc x), neg (suc y) => pos (x Nat.* y)


\func test4 : pos 5 + pos 6 = pos 11 => idp
\func test5 : pos 5 + pos 0 = pos 5  => idp
\func test6 : pos 5 + neg 8 = neg 3  => idp

\func test7 : pos 5 * pos 3 = pos 15 => idp
\func test8 : pos 5 * pos 0 = pos 0  => idp
\func test9 : pos 5 * neg 6 = neg 30 => idp

-- 3. Определите тип данных BinNat для бинарных натуральных чисел.
--    У него должно быть три конструктора: для 0, для чисел вида 2*n и чисел вида 2*n+1.
--    Такой тип данных содержит несколько различных представлений для нуля.
--    Используйте типы данных с условиями, чтобы вычислительно отождествить различные нули.

\data BinNat
  | bin:
  | O (b : BinNat) \elim b { bin: => bin: }
  | I (b : BinNat)

\func test10 : bin: `I = bin: `O `I => idp
\func test11 : bin: `O = bin: `O `O `O `O `O => idp
\func test12 : bin: `I `O `I `O = bin: `O `I `O `I `O => idp

-- 4. Докажите, что функция pred сюръективна.

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func pred-is-sur : isSur pred => \lam b => in (suc b, idp)

-- 5. Докажите, что функция suc не сюръективна.

\func suc-is-not-sur (p : isSur suc) : Empty => \case p 0 \with { | in (x, y) => contradiction }

-- 6. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g сюръективны, то g `o` f также сюръективна.
--    Докажите, что если g `o` f сюръективна, то g также сюръективна.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-sur {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur f) (q : isSur g) : isSur (g `o` f)
  => \lam c => \case q c \with {
    | in (b, t) => \case p b \with {
      | in (a, r) => in (a, rewrite r t : g (f a) = c )
    }
  }

\func o-sur' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur (g `o` f)) : isSur g
  => \lam c => \case p c \with { | in (a, t) => in (f a, t) }

-- 7. Определите множество конечных подмножеств множества A, то есть списков элементов A с точностью до перестановок и повторений элементов.

\data eqListsAsSets {A : \Type} (l1 l2 : List A)
  | equal-sets (\Pi {a : A} -> In a l1 <-> In a l2)

\truncated \data Set (A : \Set) : \Set
  | set (l : List A)
  | eq-set (l1 l2 : List A) (p : eqListsAsSets l1 l2) (i : Interval) \elim i {
    | left => set l1
    | right => set l2
  }

-- 8. Докажите теорему Кантора.

-- Теорема Кантора говорит, что для любого множества A мощность множества его подмножеств строго больше, чем мощность A.

-- Множество подмножеств можно определить следующим образом:

\func Subs (A : \Set) => A -> \Prop

-- Формально утверждение теоремы Кантора состоит из двух частей:
-- "существует инъекция из A в Subs A" и "не существует сюръекции из A в Subs A".

\func cantor1 (A : \Set) : \Sigma (f : A -> Subs A) (isInj f)
  => (\lam a => \lam a' => a = a', \lam x y p => rewrite (pmap (\lam f => f y) p) idp)


\func cantor2 (A : \Set) (f : A -> Subs A) (p : isSur f) : Empty
  => \let | in:_B : Subs A => \lam x => Not (x in: f x)
     \in \case p in:_B \with {
      | in (y, fy=B) =>
        \let | y_in:_fy : y in: f y = y `in:_B => pmap (\lam f => f y) fy=B
             | B->~B :      y `in:_B  -> Not (y `in:_B) => transportInv Not (sym y_in:_fy)
             | ~B->B : Not (y `in:_B) ->      y `in:_B  => transportInv Not y_in:_fy
        \in contrProp B->~B ~B->B
    }
    \where { \func \infix 5 in: {A : \Set} (x : A) (B : Subs A) => B x }

-- Optional
-- 9. Постройте функции Nat -> BinNat и BinNat -> Nat и докажите, что они взаимно обратны.



\func NatToBinNat (n : Nat) : BinNat
  | 0 => bin: `O
  | suc n => bsuc (NatToBinNat n)
  \where {
    \open Nat

    \func bsuc (n : BinNat) : BinNat
      | bin: => bin: `I
      | O b => b `I
      | I b => bsuc b `O
  }

\func BinNatToNat (b : BinNat) : Nat
  | bin: => 0
  | O b => 2 Nat.* BinNatToNat b
  | I b => suc (2 Nat.* BinNatToNat b)
  \where {
    \open NatToBinNat
    \open Nat

    \func suc-is-bsuc {b : BinNat} : BinNatToNat (bsuc b) = suc (BinNatToNat b) \elim b
      | bin: => idp
      | O b => idp
      | I b => rewrite suc-is-bsuc idp

    \func *2=append0 {n : Nat} : NatToBinNat (2 * n) = NatToBinNat n `O \elim n
      | 0 => idp
      | suc n => rewrite *2=append0 idp
  }

\func nbn (n : Nat) : BinNatToNat (NatToBinNat n) = n \elim n
  | 0 => idp
  | Nat.suc n => run { rewrite suc-is-bsuc, rewrite (nbn n), idp }
  \where {
    \open NatToBinNat
    \open BinNatToNat
  }

\func bnb (b : BinNat) : NatToBinNat (BinNatToNat b) = b
  | bin: => idp
  | O b => run { rewrite *2=append0, rewrite (bnb b), idp }
  | I b => run { rewrite *2=append0, rewrite (bnb b), idp }
    \where { \open BinNatToNat }

\func BinNat=Nat : BinNat = Nat => equivalence=>equality BinNat Nat (BinNatToNat, NatToBinNat, bnb, nbn)
