-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ y _ : Nat) : Nat => y
\func apply (f : Nat -> Nat) (x : Nat) : Nat => f x
\func compose (f g : Nat -> Nat) (x : Nat) : Nat => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x : Nat) (y : Nat) => f y x
\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x                                -- Nat -> Nat -> Nat
\func f2 : Nat => 0                                      -- Nat
\func \infixl 4 f3 (f : Nat -> Nat) (z : Nat) : Int => 0 -- (Nat -> Nat) -> Nat -> Int
\func f4 : Nat => 0                                      -- Nat
\func \infixl 5 f5 => f1                                 -- Nat -> Nat -> Nat
\func f6 => f4                                           -- Nat

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> a -> a -> a
   if True t _ = t
   if False _ e = e
-}

\func if (b : Bool) (A : \Type) (x y : A) : A \elim b
  | true => x
  | false => y

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x Bool x y

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y => x ^ y * x

\func fac (x : Nat) : Nat
  | 0 => 1
  | suc x => suc x * fac x

-- 7. Определите mod и gcd.

\func mod (x y : Nat) => x - y * div x y

\func gcd (x y : Nat) : Nat => gcd' y x y
  \where
    \func gcd' (s x y : Nat) : Nat \elim s
      | 0 => x
      | suc s => if (y < 1) Nat x (gcd' s y (x `mod` y))


-- TESTS
\func ^-Test1 : 2 ^ 10 = 1024 => idp
\func ^-Test2 : 3 ^ 4 = 81 => idp
\func ^-Test3 : 123 ^ 0 = 1 => idp
\func ^-Test5 : 0 ^ 123 = 0 => idp
\func ^-Test4 : 0 ^ 0 = 1 => idp

\func fac-Test1 : fac 4 = 24 => idp
\func fac-Test2 : fac 5 = 120 => idp
\func fac-Test3 : fac 1 = 1 => idp
\func fac-Test4 : fac 0 = 1 => idp

\func mod-Test1 : 11 `mod` 3 = 2 => idp
\func mod-Test2 : 17 `mod` 8 = 1 => idp
\func mod-Test3 : 7 `mod` 18 = 7 => idp
\func mod-Test4 : 7 `mod` 0 = 7 => idp

\func gcd-Test1 : 11 `gcd` 121 = 11 => idp
\func gcd-Test2 : 13 `gcd` 13 = 13 => idp
\func gcd-Test3 : 18 `gcd` 24 = 6 => idp
\func gcd-Test4 : 24 `gcd` 18 = 6 => idp
\func gcd-Test5 : 18 `gcd` 0 = 18 => idp
\func gcd-Test6 : 0 `gcd` 0 = 0 => idp
