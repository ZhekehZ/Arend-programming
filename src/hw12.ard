\import Algebra.Meta
\import Equiv.Univalence
\import Function.Meta
\import Logic.Meta
\import Meta
\import Paths.Meta
\import hw04 (+-assoc)
\import lect03 (Fin, fsuc, fzero)
\import lect04 (+-comm)
\import lect11 (funExt)
\import lect12
\import Utils \hiding (transport,Or,inl,inr)

-- 1. Докажите, что если A : \Prop, то Trunc A эквивалентен A.

\func trunc-prop {A : \Prop} : Trunc A <-> A => (\case \elim __ \return A\with { | trunc a => a }, trunc)

-- 2. Докажите следующий закон де Моргана.

\func deMorgan (A B C : \Prop) : (\Sigma A (B `Or` C)) <-> ((\Sigma A B) `Or` (\Sigma A C)) => (case-=>, case-<=)
\where {
  \func case-=> {A B C : \Prop} (s : \Sigma A (B `Or` C)) : (\Sigma A B) `Or` (\Sigma A C) \elim s
    | (a, inl a1) => inl (a, a1)
    | (a, inr b) => inr (a, b)

  \func case-<= {A B C : \Prop} (s : (\Sigma A B) `Or` (\Sigma A C)) : \Sigma A (B `Or` C) \elim s
    | inl (a, b) => (a, inl b)
    | inr (a, c) => (a, inr c)
}

-- 3. Определите элиминатор для Or через Or-rec, не используя паттерн матчинг на Or.

\func Or-elim {A B : \Prop} (C : Or A B -> \Prop)
              (f : \Pi (x : A) -> C (inl x)) (g : \Pi (y : B) -> C (inr y))
              (p : A `Or` B) : C p =>
                \let lem => Or-rec {A} {B} {\Sigma (p : A `Or B) (C p)}
                  (\lam a => (inl a, f a)) (\lam b => (inr b, g b)) p
                \in rewrite (Path.inProp p lem.1) lem.2

-- 4. Докажите, что тип утверждений является множеством.

\func prop-isSet : isSet \Prop => \lam x y => rewrite (QEquiv-to-= (univalence {x} {y})) Path.inProp

-- 5. Докажите, что функции Prop1-to-Prop2 и Prop2-to-Prop1 взаимно обратны и, как следствие, что Prop1 = Prop2.

\func [P2->P1]-o-[P1->P2]=id (P : \Prop) : Prop2-to-Prop1 (Prop1-to-Prop2 P) = P
  => propExt (\case __ \with { | inc a => a }) inc

\func [P1->P2]-o-[P2->P1]=id (P : Prop2) : Prop1-to-Prop2 (Prop2-to-Prop1 P) = P \elim P
    | (p, isP) => unfold (Prop2-to-Prop1, Prop1-to-Prop2) {?}

\func Prop1=Prop2 : Prop1 = Prop2 =>
  equivalence=>equality Prop1 Prop2
    (Prop1-to-Prop2, Prop2-to-Prop1, [P2->P1]-o-[P1->P2]=id, [P1->P2]-o-[P2->P1]=id)

-- Можно сделать только одно из упражнений 6a,6b на выбор.
-- 6a. Тип С называется когенератором, если для любых множеств A и B и любых функция f,g : A -> B верно,
--        что если h `o` f = h `o` g для всех h : B -> C, то f = g.
--     Докажите, что \Prop является когенератором.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func isCogenerator (C : \Type) => \Pi {A B : \Set} (f g : A -> B) (p : \Pi (h : B -> C) -> h `o` f = h `o` g) -> f = g

\func PropIsCogenerator : isCogenerator \Prop => {?}

-- 6b. Тип X называется инъективным, если для любой функции f : A -> X и любой инъекции i : A -> B сущесвует функция
--        l : B -> X такая, что l `o` i = f.
--     Докажите, что \Prop инъективен.
{-
      A c--i--> B
       \       /         l = ?
      f \     / l        l|Im(i) = inv(i) `o` f
         \   /           inv(i) : Im(i) -> A = ???
          v v
         \Prop
-}


\func isInj {A B : \Type} (f : A -> B) => \Pi (x y : A) -> f x = f y -> x = y

\func isInjective (X : \Type) => \Pi {A B : \Type} (f : A -> X) (i : A -> B) (p : isInj i) -> \Sigma (l : B -> X) (l `o` i = f)

\func Prop-isInjective : isInjective \Prop => \lam {A} {B} f i p
  => ({?}, {?})





-- Можно сделать только одно из упражнений 7a,7b на выбор.
-- 7a. Докажите, что (Bool = Bool) = Bool.

\func BoolAut : (Bool = Bool) = Bool =>
  \let eq2 => equivalence=>equality Bool Bool (not, not, not-not, not-not)
  \in equivalence=>equality (Bool = Bool) Bool
    ( \case equality=>equivalence Bool Bool __ \with { (f, g, p1, p2) => f true }
    , if __ idp eq2
    , {?}
    , {?}
    )

-- 7b. Докажите, что (n+m)-элементное множество равно размеченному объединению n- и m-элементных множеств.

\func th-7b {n m : Nat} : Either (Fin n) (Fin m) = Fin (n + m)
  => {?} -- rewrite (Fin=H {n}) (rewrite (Fin=H {m}) (rewrite (Fin=H {n + m}) th-7b''))
    \where {
      \open Nat
      \open Either

      \func H (n : Nat) => (\Sigma (k : Nat) (k < n))
--
--      \func Fin->H {n : Nat} (f : Fin n) : H n
--        | {suc n}, fzero => (0, suc<=suc zero<=_)
--        | {suc n}, fsuc f => \let r => Fin->H f \in (suc r.1, suc<=suc r.2)
--
--      \func H->Fin {n : Nat} (nt : H n) : Fin n
--        | {0}, (_, _) => contradiction
--        | {suc n}, (0, x) => fzero
--        | {suc n}, (suc k, suc<=suc x) => fsuc (H->Fin (k, x))
--
--      \func inv-2 {n : Nat} (nt : H n) : Fin->H (H->Fin nt) = nt \elim n, nt
--        | 0, (k,_x) => contradiction
--        | suc n, (k, k<sn) => \case \elim k, \elim k<sn \with {
--          | 0, suc<=suc zero<=_ => idp
--          | suc k, suc<=suc _x => rewrite (inv-2 (k, _x)) idp
--        }
--
--      \func inv-1 {n : Nat} (f : Fin n) : H->Fin (Fin->H f) = f \elim n, f
--        | suc n, fzero => idp
--        | suc n, fsuc f => rewrite (inv-1 f) idp
--
--
--      \func Fin=H {n : Nat} : Fin n = H n => equivalence=>equality (Fin n) (H n) (Fin->H, H->Fin, inv-1, inv-2)

--      \func th-7b'' {n m : Nat} : Either (H n) (H m) = H (n + m)
--        => equivalence=>equality (Either (H n) (H m)) (H (n + m))
--            ( f1 {n} {m},
--              \lam h => \case totality (suc h.1) n \with {
--              | inl a => inl (h.1, a)
--              | inr b => inr {?}
--            }
--            , \case \elim __ \with {
--              | inl a => {?}
--              | inr b => \case \elim n, \elim b \with {
--                | 0, b => {?}
--                | suc n, b => {?}
--              }
--            }, {?})

--        \func f1 {n m : Nat} (enm : Either (H n) (H m)) : H (n + m) \elim enm
--          | inl (a, a<n) => (a, a<n->a<n+m m a<n)
--          | inr (b, b<m) => (n + b, a<m->n+a<n+m n b<m)

        \func f2 {n m : Nat} (h : H (n + m)) : Either (H n) (H m) \elim h
          | (a, a<n+m) => \case totality (suc a) n \with {
            | inl a<n => inl (a, a<n)
            | inr n<=a => inr (tmp'' a n<=a a<n+m)
          }

      --      \func a<n->a<n+m {a n : Nat} (m : Nat) (p : a < n) : a < n + m \elim a, n, m, p
--          | 0, suc n, 0, q => suc<=suc zero<=_
--          | 0, suc n, suc m, suc<=suc zero<=_ => suc<=suc zero<=_
--          | suc a, suc n, 0, suc<=suc a<n => suc<=suc a<n
--          | suc a, suc n, suc m, suc<=suc _x => suc<=suc (a<n->a<n+m {a} {suc n} m (tmp _x))
--
--        \func tmp {n m : Nat} (p : n <= m) : n <= suc m \elim n, m, p
--          | 0, _, zero<=_ => zero<=_
--          | suc n, suc m, suc<=suc p => suc<=suc (tmp p)
--
--        \func tmp' {n : Nat} : n <= n \elim n
--          | 0 => zero<=_
--          | suc n => suc<=suc tmp'
--
--        \func a<m->n+a<n+m {a m : Nat} (n : Nat) (p : a < m) : n + a < n + m \elim a, m, n, p
--            | 0, suc m, 0, suc<=suc zero<=_ => suc<=suc zero<=_
--            | 0, suc m, suc n, suc<=suc zero<=_ => suc<=suc (a<n->a<n+m m tmp')
--            | suc a, suc m, 0, suc<=suc _x => rewrite (+-comm 0 a) (rewrite (+-comm 0 m) (suc<=suc _x))
--            | suc a, suc m, suc n, suc<=suc _x => suc<=suc (a<m->n+a<n+m (suc n) _x)
--
        \func tmp'' {a n : Nat} (m : Nat) (p : n <= a) (j : a < n + m) : H m => {?}
    }
