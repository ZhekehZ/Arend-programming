-- 1. Напишите функцию lookup, которая принимает List A и натуральное число и возвращает элемент по заданому индексу.
--    В общем случае эту функцию определить невозможно, т.к. индекс может быть больше, чем число элементов в списке.
--    Поэтому эта функция должна дополнительно еще принимать доказательство того, что индекс находится в допустимых границах, в виде T (n < length xs).

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

\func lookup {A : \Type} (xs : List A) (i : Nat) (p : T (i < length xs)) : A \elim xs, i
  | nil, 0 => absurd p
  | nil, suc i => absurd p
  | cons a xs, 0 => a
  | cons a xs, suc i => lookup xs i p
  \where {
    \func absurd {A : \Type} (x : Empty) : A
  }

-- 2. Реализуйте аналоги функции replicate для vec и Vec (эта функция создает список заданной длины, состоящий из повторений данного элемента).

\func replicate'vec {A : \Type} (x : A) (n : Nat) : vec A n \elim n
  | 0 => ()
  | suc n => (x, replicate'vec x n)

\func replicate'Vec {A : \Type} (x : A) (n : Nat) : Vec A n \elim n
  | 0 => vnil
  | suc n => vcons x (replicate'Vec x n)

-- 3. Реализуйте аналоги функции map для vec и Vec.

\func map'vec {A B : \Type} (n : Nat) (f : A -> B) (xs : vec A n) : vec B n \elim n, xs
  | 0, _ => ()
  | suc n, (x, xs) => (f x, map'vec n f xs)

\func map'Vec {A B : \Type} {n : Nat} (f : A -> B) (xs : Vec A n) : Vec B n \elim n, xs
  | 0, vnil => vnil
  | suc n, vcons a xs => vcons (f a) (map'Vec f xs)

-- 4. Реализуйте аналоги функции zipWith для vec и Vec.
--    Функция должна принимать вектора одинаковой длины.

\func zipWith'vec {A B : \Type} (n : Nat) (as : vec A n) (bs : vec B n) : vec (\Sigma A B) n
  | 0, _, _ => ()
  | suc n, (a, as), (b, bs) => ((a, b), zipWith'vec n as bs)

\func zipWith'Vec {A B : \Type} {n : Nat} (as : Vec A n) (bs : Vec B n) : Vec (\Sigma A B) n \elim n, as, bs
  | 0, _, _ => vnil
  | suc n, vcons a as, vcons b bs => vcons (a, b) (zipWith'Vec as bs)

-- 5. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  transport (\lam z => f a b = f a' z) q (transport (\lam z => f a b = f z b) p idp)

-- 6. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (\lam a => a) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => repl (pmap B p) b

-- 7. Определите тип CTree A n полных бинарных деревьев высоты ровно n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data CTree (A : \Type) (n : Nat) \elim n
  | 0 => ctree-list
  | suc n => ctree-node (CTree A n) A (CTree A n)

-- 8. Определите тип Tree A n бинарных деревьев высоты не больше n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data Tree (A : \Type) (n : Nat) \elim n
  | _ => tree-list
  | suc n => tree-node (Tree A n) A (Tree A n)

-- определите функцию, возвращающую высоту дерева.

\func height {A : \Type} {n : Nat} (t : Tree A n) : Fin (suc n) \elim n, t
  | _, tree-list => fzero
  | suc n, tree-node l a r => fsuc (max (height l) (height r))
  \where {
    \func max {n : Nat} (a b : Fin n) : Fin n \elim n, a, b
      | suc n, fzero, x => x
      | suc n, x, fzero => x
      | suc n, fsuc a, fsuc b => fsuc (max a b)
  }

-- 9. Чему равно fileTest (в нормальной форме)? Докажите это.

\func test-fileTest : fileTest = (17, 8, 13, 55, 18, 21) => idp

-- 10. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\func test-M5_t''' : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp

\import Utils
\import lect03 \hiding (Vec,vnil,vcons)

-- Optional task
-- 11. Функции Fin n -> A соответствуют спискам элементов A длины n.
--     Функция, преобразующая Vec A n в Fin n -> A, была реализована на лекции.
--     Реализуйте обратную функцию.

\func coin {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n \elim n
  | 0 => vnil
  | suc n => vcons (f fzero) (coin (\lam x => f (fsuc x)))

\module Coin-Test \where {
  \func test-generator (x : Fin 5) : Nat
    | fzero => 1
    | fsuc fzero => 2
    | fsuc (fsuc fzero) => 3
    | fsuc (fsuc (fsuc fzero)) => 4
    | fsuc (fsuc (fsuc (fsuc fzero))) => 5
    | fsuc (fsuc (fsuc (fsuc (fsuc ()))))

  \func test-vec : Vec Nat 5 => vcons 1 (vcons 2 (vcons 3 (vcons 4 (vcons 5 vnil))))

  \func test-coin : coin test-generator = test-vec => idp
}

-- Optional task
-- 12. Определите тип матриц и ряд функций над ними.

\func Mat (A : \Type) (n m : Nat) : \Type => Fin n -> Fin m -> A

-- диагональная матрица с элементами e на диагонали и z на остальных позициях.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n =>
  \lam i j => ifeq (toNat i) (toNat j) e z
  \where {
    \func ifeq {A : \Type} (n m : Nat) (t f : A) : A \elim n, m
      | suc n, suc m => ifeq n m t f
      | 0, 0 => t
      | _, _ => f
  }

-- транспонирование матриц

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n =>
  \lam i j => M j i

-- сложение матриц

\func matAdd {A : \Type} (add : A -> A -> A) {n m : Nat} (M N : Mat A n m) : Mat A n m =>
  \lam i j => add (M i j) (N i j)

-- умножение матриц

-- z ─ нейтральный элемент по сложению.
\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) {n m k : Nat} (M : Mat A n m) (N : Mat A m k) : Mat A n k =>
  \lam i j => \let | row => coin (M i)
                   | col => coin (`N j)
                   | pairs => zipWith'Vec row col
              \in fold z (\lam x p => add x (mul p.1 p.2)) pairs
  \where {
    \func fold {A B : \Type} {n : Nat} (z : A) (f : A -> B -> A) (v : Vec B n) : A \elim n, v
      | 0, vnil => z
      | suc n, vcons a v => fold (f z a) f v
  }

\module Matrix-Test \where {
  \open Nat (+, *)
  \func M1 (i : Fin 3) (j : Fin 3) : Nat => toNat i * 3 + toNat j
  {- 0 1 2
     3 4 5
     6 7 8
  -}

  \func M2 (i : Fin 3) (j : Fin 3) : Nat => toNat i * toNat j
  {- 0 0 0
     0 1 2
     0 2 4
  -}

  \func M1*M2 (i : Fin 3) (j : Fin 3) : Nat
    | _, fzero => 0
    | i, j => (5 + toNat i * 9) * toNat j
  {- 0 5 10
     0 14 28
     0 23 46
  -}

  \func test (i : Fin 3) (j : Fin 3) : matMul 0 (+) (*) M1 M2 i j = M1*M2 i j
    | fzero, fzero => idp
    | fzero, fsuc fzero => idp
    | fsuc fzero, fzero => idp
    | fsuc fzero, fsuc fzero => idp
    | fsuc (fsuc fzero), fzero => idp
    | fzero, fsuc (fsuc fzero) => idp
    | fsuc (fsuc fzero), fsuc fzero => idp
    | fsuc fzero, fsuc (fsuc fzero) => idp
    | fsuc (fsuc fzero), fsuc (fsuc fzero) => idp
    | fsuc (fsuc (fsuc ())), _
    | fzero, fsuc (fsuc (fsuc ()))
    | fsuc fzero, fsuc (fsuc (fsuc ()))
    | fsuc (fsuc fzero), fsuc (fsuc (fsuc ()))
}